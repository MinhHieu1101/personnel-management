scalar EmailAddress
scalar DateTime

enum UserType {
  MANAGER
  MEMBER
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
}

input UserInput {
  email: EmailAddress!
  password: String!
}

type User {
  userId: ID!
  username: String!
  password: String!
  email: EmailAddress!
  role: UserType!
  createdAt: DateTime
}

type Member {
  memberId: ID!
  memberName: String!
}

type Manager {
  managerId: ID!
  managerName: String!
}

type Team {
  teamId: ID!
  teamName: String!
  managers: [Manager!]!
  members: [Member]
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  userId: ID!
}

type UserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
  user: User
}

type AuthMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
  auth: AuthPayload
}

type Query {
  users(role: UserType!): [User!]!
  user(userId: ID!): User
  team(teamId: ID!): Team
}

type Mutation {
  createUser(
    username: String!
    email: EmailAddress!
    password: String!
    role: UserType!
  ): UserMutationResponse!
  login(input: UserInput!): AuthMutationResponse!
}
